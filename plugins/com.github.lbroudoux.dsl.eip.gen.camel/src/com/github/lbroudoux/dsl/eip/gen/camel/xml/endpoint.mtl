[comment encoding = UTF-8 /]
[module endpoint('http://www.github.com/lbroudoux/dsl/eip/1.0')]

[import com::github::lbroudoux::dsl::eip::gen::camel::xml::channel /]

[template public genEndpoint(anEndpoint : Endpoint) post(trim())]
<!-- Endpoint not yet supported by generator -->
[/template]

[template public genEndpoint(aFilter : Filter) post(trim())]
<filter id="[aFilter.name/][aFilter.genOutgoingChannelName()/]">
  <simple></simple>
  [aFilter.toChannel.toEndpoint.genEndpoint()/]	
</filter>
[/template]

[template public genEndpoint(aFilter : ContentFilter) post(trim())]

[/template]

[template public genEndpoint(anEnricher : Enricher) post(trim())]

[/template]

[template public genEndpoint(aTransformer : Transformer) post(trim())]
<to id="[aTransformer.name/][aTransformer.genOutgoingChannelName()/]" uri="xslt:[aTransformer.name/]"/>
[aTransformer.toChannel.toEndpoint.genEndpoint()/]
[/template]

[template public genEndpoint(aRouter : Router) post(trim())]
<choice id="[aRouter.name/][aRouter.genOutgoingChannelName()/]">
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
  <when id="[route.channel.name/]">
	<simple>[route.condition/]</simple>
	[route.channel.toEndpoint.genEndpoint()/]
  </when>
[/for]
  <otherwise>
	[aRouter.toChannel.toEndpoint.genEndpoint()/]
  </otherwise>
</choice>
[/template]

[template public genEndpoint(aSplitter : Splitter) post(trim())]
<split id="[aSplitter.name/][aSplitter.genOutgoingChannelName()/]">
  [aSplitter.toChannel.toEndpoint.genEndpoint()/]
</split>
[/template]

[template public genEndpoint(aCompositeProcessor : CompositeProcessor) post(trim())]
<pipeline id="[aCompositeProcessor.name/][aCompositeProcessor.genOutgoingChannelName()/]">
[for (endpoint : Endpoint | aCompositeProcessor.ownedEndpoints)]
[if (endpoint.fromChannels->size() = 0)]
  [endpoint.genEndpoint()/]
[/if]
[/for]
</pipeline>
[aCompositeProcessor.toChannel.toEndpoint.genEndpoint()/]
[/template]

[template public genEndpoint(aGateway : Gateway) post(trim())]
<to id="[aGateway.name/][aGateway.genOutgoingChannelName()/]" uri="switchyard://[aGateway.name/]"/>
[/template]

[template public genEndpoint(aServiceActivator : ServiceActivator) post(trim())]
<to id="[aServiceActivator.name/][aServiceActivator.genOutgoingChannelName()/]" uri="switchyard://[aServiceActivator.name/]"/>
[aServiceActivator.toChannel.toEndpoint.genEndpoint()/]
[/template]
